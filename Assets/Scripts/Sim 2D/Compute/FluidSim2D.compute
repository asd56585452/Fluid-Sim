#pragma kernel ExternalForces
#pragma kernel UpdateSpatialHash
#pragma kernel CalculateDensities
#pragma kernel CalculatePressureForce
#pragma kernel CalculateViscosity
#pragma kernel UpdatePositions
#pragma kernel AddObstacleForces

// Includes
#include "./FluidMaths2D.hlsl"
#include "./SpatialHash.hlsl"

static const int NumThreads = 64;

// Buffers
RWStructuredBuffer<float2> Positions;
RWStructuredBuffer<float2> PredictedPositions;
RWStructuredBuffer<float2> Velocities;
RWStructuredBuffer<float2> Densities; // Density, Near Density
RWStructuredBuffer<uint3> SpatialIndices; // used for spatial hashing
RWStructuredBuffer<uint> SpatialOffsets; // used for spatial hashing
RWStructuredBuffer<float2> ObstaclePositions; //MoveObstacle
RWStructuredBuffer<float2> ObstacleNormals; //MoveObstacle
RWStructuredBuffer<float2> ObstacleFources; //MoveObstacle
RWStructuredBuffer<float3> ObstacleTorques; //MoveObstacle
RWStructuredBuffer<float2> ObstacleFourceResults; //MoveObstacle
RWStructuredBuffer<float3> ObstacleTorqueResults; //MoveObstacle

// Settings
const uint numParticles;
const float gravity;
const float deltaTime;
const float collisionDamping;
const float smoothingRadius;
const float targetDensity;
const float pressureMultiplier;
const float nearPressureMultiplier;
const float viscosityStrength;
const float2 boundsSize;
const float2 interactionInputPoint;
const float interactionInputStrength;
const float interactionInputRadius;
const uint numObstacleParticles; //MoveObstacle
const uint numWaterParticles; //MoveObstacle

//obstacle
const float2 obstacleSize;
const float2 obstacleCentre;
const float4x4 transformMatrix; //MoveObstacle
const float obstaclefource; //MoveObstacle


float DensityKernel(float dst, float radius)
{
	return SpikyKernelPow2(dst, radius);
}

float NearDensityKernel(float dst, float radius)
{
	return SpikyKernelPow3(dst, radius);
}

float DensityDerivative(float dst, float radius)
{
	return DerivativeSpikyPow2(dst, radius);
}

float NearDensityDerivative(float dst, float radius)
{
	return DerivativeSpikyPow3(dst, radius);
}

float ViscosityKernel(float dst, float radius)
{
	return SmoothingKernelPoly6(dst, smoothingRadius);
}

float2 CalculateDensity(float2 pos)
{
	int2 originCell = GetCell2D(pos, smoothingRadius);
	float sqrRadius = smoothingRadius * smoothingRadius;
	float density = 0;
	float nearDensity = 0;

	// Neighbour search
	for (int i = 0; i < 9; i++)
	{
		uint hash = HashCell2D(originCell + offsets2D[i]);
		uint key = KeyFromHash(hash, numParticles);
		uint currIndex = SpatialOffsets[key];

		while (currIndex < numParticles)
		{
			uint3 indexData = SpatialIndices[currIndex];
			currIndex++;
			// Exit if no longer looking at correct bin
			if (indexData[2] != key) break;
			// Skip if hash does not match
			if (indexData[1] != hash) continue;

			uint neighbourIndex = indexData[0];
            // Skip MoveObstacle
            if (neighbourIndex >= numWaterParticles)
                continue; //MoveObstacle
			float2 neighbourPos = PredictedPositions[neighbourIndex];
			float2 offsetToNeighbour = neighbourPos - pos;
			float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

			// Skip if not within radius
			if (sqrDstToNeighbour > sqrRadius) continue;

			// Calculate density and near density
			float dst = sqrt(sqrDstToNeighbour);
			density += DensityKernel(dst, smoothingRadius);
			nearDensity += NearDensityKernel(dst, smoothingRadius);
		}
	}

	return float2(density, nearDensity);
}

float PressureFromDensity(float density)
{
	return (density - targetDensity) * pressureMultiplier;
}

float NearPressureFromDensity(float nearDensity)
{
	return nearPressureMultiplier * nearDensity;
}

float2 ExternalForces(float2 pos, float2 velocity)
{
	// Gravity
	float2 gravityAccel = float2(0, gravity);
	
	// Input interactions modify gravity
	if (interactionInputStrength != 0) {
		float2 inputPointOffset = interactionInputPoint - pos;
		float sqrDst = dot(inputPointOffset, inputPointOffset);
		if (sqrDst < interactionInputRadius * interactionInputRadius)
		{
			float dst = sqrt(sqrDst);
			float edgeT = (dst / interactionInputRadius);
			float centreT = 1 - edgeT;
			float2 dirToCentre = inputPointOffset / dst;

			float gravityWeight = 1 - (centreT * saturate(interactionInputStrength / 10));
			float2 accel = gravityAccel * gravityWeight + dirToCentre * centreT * interactionInputStrength;
			accel -= velocity * centreT;
			return accel;
		}
	}

	return gravityAccel;
}


void HandleCollisions(uint particleIndex)//MoveObstacle/*
{
	float2 pos = Positions[particleIndex];
	float2 vel = Velocities[particleIndex];

    if (particleIndex < numWaterParticles)
    {
		// Keep particle inside bounds
		const float2 halfSize = boundsSize * 0.5;
		float2 edgeDst = halfSize - abs(pos);

		if (edgeDst.x <= 0)
		{
			pos.x = halfSize.x * sign(pos.x);
			vel.x *= -1 * collisionDamping;
		}
		if (edgeDst.y <= 0)
		{
			pos.y = halfSize.y * sign(pos.y);
			vel.y *= -1 * collisionDamping;
		}

		// Collide particle against the test obstacle
		const float2 obstacleHalfSize = obstacleSize * 0.5;
		float2 obstacleEdgeDst = obstacleHalfSize - abs(pos - obstacleCentre);

		if (obstacleEdgeDst.x >= 0 && obstacleEdgeDst.y >= 0)
		{
			if (obstacleEdgeDst.x < obstacleEdgeDst.y) {
				pos.x = obstacleHalfSize.x * sign(pos.x - obstacleCentre.x) + obstacleCentre.x;
				vel.x *= -1 * collisionDamping;
			}
			else {
				pos.y = obstacleHalfSize.y * sign(pos.y - obstacleCentre.y) + obstacleCentre.y;
				vel.y *= -1 * collisionDamping;
			}
		}
    }
	
	
	
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint3 indexData = SpatialIndices[currIndex];
            currIndex++;
			// Exit if no longer looking at correct bin
            if (indexData[2] != key)
                break;
			// Skip if hash does not match
            if (indexData[1] != hash)
                continue;

            uint neighbourIndex = indexData[0];
            if (particleIndex < numWaterParticles)
            {
				if (neighbourIndex == particleIndex)
					continue;
				if (neighbourIndex < numWaterParticles)
					continue;

				float2 neighbourPos = Positions[neighbourIndex];
				float2 offsetToNeighbour = neighbourPos - pos;
				float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

				// Skip if not within radius
				if (sqrDstToNeighbour > 0.005f)
					continue;
			
				float2 particleNor = ObstacleNormals[neighbourIndex - numWaterParticles];
				float4 particleNor4 = float4(particleNor, 0.0f, 0.0f);
				float4 transformedNor4 = mul(transformMatrix, particleNor4);
				float2 normal = float2(transformedNor4.x, transformedNor4.y);
			
				float don = dot(offsetToNeighbour, normal);
				if (don <= 0)
					continue;
				else
				{
					pos = pos + don*normal;
					float dov = dot(vel, normal);
					if(dov<0)
						vel = vel - dov * normal * (1 + collisionDamping);
				}
            }
			else
            {
                if (neighbourIndex == particleIndex)
                    continue;
                if (neighbourIndex >= numWaterParticles)
                    continue;
                float2 neighbourPos = Positions[neighbourIndex];
                float2 offsetToNeighbour = neighbourPos - pos;
                float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

				// Skip if not within radius
                if (sqrDstToNeighbour > 0.005f)
                    continue;
                float2 particleNor = ObstacleNormals[particleIndex - numWaterParticles];
                float4 particleNor4 = float4(particleNor, 0.0f, 0.0f);
                float4 transformedNor4 = mul(transformMatrix, particleNor4);
                float2 normal = float2(transformedNor4.x, transformedNor4.y);
				
                float don = dot(offsetToNeighbour, normal);
                if (don > 0)
                    continue;
                else
                {
                    float dov = dot(Velocities[neighbourIndex], normal);
                    if (dov < 0)
                        vel = vel + dov * normal * (1 - collisionDamping);
                }
            }
            

        }

    }

	// Update position and velocity
    GroupMemoryBarrierWithGroupSync();
	Positions[particleIndex] = pos;
    Velocities[particleIndex] = vel; //MoveObstacle*/
}

[numthreads(NumThreads,1,1)]
void ExternalForces(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;

	// External forces (gravity and input interaction)
	Velocities[id.x] += ExternalForces(Positions[id.x], Velocities[id.x]) * deltaTime;

	// Predict
	const float predictionFactor = 1 / 120.0;
	if(id.x<numWaterParticles)
		PredictedPositions[id.x] = Positions[id.x] + Velocities[id.x] * predictionFactor;
    else
    {
        float2 particlePos = ObstaclePositions[id.x - numWaterParticles];
        float4 particlePos4 = float4(particlePos, 0.0f, 1.0f);
        float4 transformedPos4 = mul(transformMatrix, particlePos4);
        PredictedPositions[id.x] = transformedPos4.xy;
    }
}

[numthreads(NumThreads,1,1)]
void UpdateSpatialHash (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;

	// Reset offsets
	SpatialOffsets[id.x] = numParticles;
	// Update index buffer
	uint index = id.x;
	int2 cell = GetCell2D(PredictedPositions[index], smoothingRadius);
	uint hash = HashCell2D(cell);
	uint key = KeyFromHash(hash, numParticles);
	SpatialIndices[id.x] = uint3(index, hash, key);
}

[numthreads(NumThreads,1,1)]
void CalculateDensities (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;

	float2 pos = PredictedPositions[id.x];
	Densities[id.x] = CalculateDensity(pos);
}

[numthreads(NumThreads,1,1)]
void CalculatePressureForce (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;

	float density = Densities[id.x][0];
	float densityNear = Densities[id.x][1];
	float pressure = PressureFromDensity(density);
	float nearPressure = NearPressureFromDensity(densityNear);
	float2 pressureForce = 0;
	
	float2 pos = PredictedPositions[id.x];
	int2 originCell = GetCell2D(pos, smoothingRadius);
	float sqrRadius = smoothingRadius * smoothingRadius;

	// Neighbour search
	for (int i = 0; i < 9; i ++)
	{
		uint hash = HashCell2D(originCell + offsets2D[i]);
		uint key = KeyFromHash(hash, numParticles);
		uint currIndex = SpatialOffsets[key];

		while (currIndex < numParticles)
		{
			uint3 indexData = SpatialIndices[currIndex];
			currIndex ++;
			// Exit if no longer looking at correct bin
			if (indexData[2] != key) break;
			// Skip if hash does not match
			if (indexData[1] != hash) continue;

			uint neighbourIndex = indexData[0];
			// Skip if looking at self
			if (neighbourIndex == id.x) continue;
			// Skip MoveObstacle
            if (neighbourIndex >= numWaterParticles)
                continue; //MoveObstacle

			float2 neighbourPos = PredictedPositions[neighbourIndex];
			float2 offsetToNeighbour = neighbourPos - pos;
			float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

			// Skip if not within radius
			if (sqrDstToNeighbour > sqrRadius) continue;

			// Calculate pressure force
			float dst = sqrt(sqrDstToNeighbour);
			float2 dirToNeighbour = dst > 0 ? offsetToNeighbour / dst : float2(0, 1);

			float neighbourDensity = Densities[neighbourIndex][0];
			float neighbourNearDensity = Densities[neighbourIndex][1];
			float neighbourPressure = PressureFromDensity(neighbourDensity);
			float neighbourNearPressure = NearPressureFromDensity(neighbourNearDensity);

			float sharedPressure = (pressure + neighbourPressure) * 0.5;
			float sharedNearPressure = (nearPressure + neighbourNearPressure) * 0.5;

			pressureForce += dirToNeighbour * DensityDerivative(dst, smoothingRadius) * sharedPressure / neighbourDensity;
			pressureForce += dirToNeighbour * NearDensityDerivative(dst, smoothingRadius) * sharedNearPressure / neighbourNearDensity;
		}
	}

	float2 acceleration = pressureForce / density;
	Velocities[id.x] += acceleration * deltaTime;//
}



[numthreads(NumThreads,1,1)]
void CalculateViscosity (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;
	
		
	float2 pos = PredictedPositions[id.x];
	int2 originCell = GetCell2D(pos, smoothingRadius);
	float sqrRadius = smoothingRadius * smoothingRadius;

	float2 viscosityForce = 0;
	float2 velocity = Velocities[id.x];

	for (int i = 0; i < 9; i ++)
	{
		uint hash = HashCell2D(originCell + offsets2D[i]);
		uint key = KeyFromHash(hash, numParticles);
		uint currIndex = SpatialOffsets[key];

		while (currIndex < numParticles)
		{
			uint3 indexData = SpatialIndices[currIndex];
			currIndex ++;
			// Exit if no longer looking at correct bin
			if (indexData[2] != key) break;
			// Skip if hash does not match
			if (indexData[1] != hash) continue;

			uint neighbourIndex = indexData[0];
			// Skip if looking at self
			if (neighbourIndex == id.x) continue;
			// Skip MoveObstacle
            if (neighbourIndex >= numWaterParticles)
                continue; //MoveObstacle

			float2 neighbourPos = PredictedPositions[neighbourIndex];
			float2 offsetToNeighbour = neighbourPos - pos;
			float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

			// Skip if not within radius
			if (sqrDstToNeighbour > sqrRadius) continue;

			float dst = sqrt(sqrDstToNeighbour);
			float2 neighbourVelocity = Velocities[neighbourIndex];
			viscosityForce += (neighbourVelocity - velocity) * ViscosityKernel(dst, smoothingRadius);
		}

	}
	Velocities[id.x] += viscosityForce * viscosityStrength * deltaTime;
}

[numthreads(NumThreads, 1, 1)] //MoveObstacle/*
void UpdatePositions(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;
    if (id.x >= numWaterParticles)
    {
        /*float2 particlePos = ObstaclePositions[id.x - numWaterParticles];
        float4 particlePos4 = float4(particlePos, 0.0f, 1.0f);
        float4 transformedPos4 = mul(transformMatrix, particlePos4);
        Positions[id.x] = transformedPos4.xy;
		
        float2 particleNor = ObstacleNormals[id.x - numWaterParticles];
        float4 particleNor4 = float4(particleNor, 0.0f, 0.0f);
        float4 transformedNor4 = mul(transformMatrix, particleNor4);
        Velocities[id.x] = float2(10.0f * transformedNor4.x, 0.0f);*/
		
        Positions[id.x] = PredictedPositions[id.x];
        Velocities[id.x] = float2(0.0f, 0.0f);

    }
	
	GroupMemoryBarrierWithGroupSync();
	
    if (id.x < numWaterParticles)
    {
		Positions[id.x] += Velocities[id.x] * deltaTime;
    }
    HandleCollisions(id.x);
	//MoveObstacle*/
	
}

//MoveObstacle/*
[numthreads(NumThreads, 1, 1)] 
void AddObstacleForces(uint3 id : SV_DispatchThreadID)
{
	if(id.x == 0)
    {
		ObstacleFourceResults[0] = float2(0, 0);
		ObstacleTorqueResults[0] = float3(0, 0,0);
    }
    ObstacleFources[id.x] = Velocities[numWaterParticles + id.x] / (viscosityStrength * deltaTime*100000);
    ObstacleTorques[id.x] = cross(float3(ObstaclePositions[id.x].x,ObstaclePositions[id.x].y,0), float3(ObstacleFources[id.x].x, ObstacleFources[id.x].y, 0));
    GroupMemoryBarrierWithGroupSync();
    uint index = id.x;
    uint size = numObstacleParticles; //5
    uint stride = size / 2; // 初始步长，取数组大小的一半 2

    // 逐步进行归约，每次将有效数据规模减少一半
    while (stride > 0)
    {
        if (index < stride)//0,1
        {
            ObstacleFources[index] += ObstacleFources[index + stride]; // 正常归约 0,1 2,3
            ObstacleTorques[index] += ObstacleTorques[index + stride]; // 正常归约 0,1 2,3

            // 处理剩余的元素
            if (index + stride * 2 < size)//
            {
                ObstacleFources[index] += ObstacleFources[index + stride * 2];
                ObstacleTorques[index] += ObstacleTorques[index + stride * 2];
            }
        }

        // 同步线程组，以确保这一轮的加法完成
        GroupMemoryBarrierWithGroupSync();

        // 更新步长，继续归约
        size = (size + 1) / 2; // 处理奇数大小的情况
        stride = size / 2;
    }
	
    if (id.x == 0)
    {
        ObstacleFourceResults[0] = ObstacleFources[0];
        ObstacleTorqueResults[0] = ObstacleTorques[0];
    }
} 
//MoveObstacle*/